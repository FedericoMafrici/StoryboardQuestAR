//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Federico/InputMaps/ButtonController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ButtonController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ButtonController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ButtonController"",
    ""maps"": [
        {
            ""name"": ""Left"",
            ""id"": ""37823874-a4d3-4a09-908f-ab05994a79da"",
            ""actions"": [
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""6b564f2b-eb33-482a-ba34-2e889919c04f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""1d69c7b0-382f-45fa-a3d6-75c6ef3ac99c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ace0473c-79c0-45a9-8fbf-b00c86bf75c4"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb5fc787-980a-4374-8263-597cc94062ac"",
                    ""path"": ""<XRSimulatedController>{LeftHand}/primaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90121da1-139a-4c03-b38b-1ca7fc227cac"",
                    ""path"": ""<OculusTouchController>/secondaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cfca133-b466-40bd-911d-11239b187000"",
                    ""path"": ""<XRSimulatedController>/secondaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Left
        m_Left = asset.FindActionMap("Left", throwIfNotFound: true);
        m_Left_X = m_Left.FindAction("X", throwIfNotFound: true);
        m_Left_Y = m_Left.FindAction("Y", throwIfNotFound: true);
    }

    ~@ButtonController()
    {
        UnityEngine.Debug.Assert(!m_Left.enabled, "This will cause a leak and performance issues, ButtonController.Left.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Left
    private readonly InputActionMap m_Left;
    private List<ILeftActions> m_LeftActionsCallbackInterfaces = new List<ILeftActions>();
    private readonly InputAction m_Left_X;
    private readonly InputAction m_Left_Y;
    public struct LeftActions
    {
        private @ButtonController m_Wrapper;
        public LeftActions(@ButtonController wrapper) { m_Wrapper = wrapper; }
        public InputAction @X => m_Wrapper.m_Left_X;
        public InputAction @Y => m_Wrapper.m_Left_Y;
        public InputActionMap Get() { return m_Wrapper.m_Left; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftActions set) { return set.Get(); }
        public void AddCallbacks(ILeftActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftActionsCallbackInterfaces.Add(instance);
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
        }

        private void UnregisterCallbacks(ILeftActions instance)
        {
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
        }

        public void RemoveCallbacks(ILeftActions instance)
        {
            if (m_Wrapper.m_LeftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftActions @Left => new LeftActions(this);
    public interface ILeftActions
    {
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
    }
}
